// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// 28-jan-18 rod
// adjusted p and tolerance
// changed x to z in drive joystick
//
#include <CameraServer.h>
#include <Commands/Scheduler.h>
#include <RobotBase.h>
#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<UpperTilt> Robot::upperTilt;
std::shared_ptr<Bucket> Robot::bucket;
std::shared_ptr<ClampTilt> Robot::clampTilt;
std::shared_ptr<Chassis> Robot::chassis;
std::shared_ptr<Clamp> Robot::clamp;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Winch> Robot::winch;

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    upperTilt.reset(new UpperTilt());
    bucket.reset(new Bucket());
    clampTilt.reset(new ClampTilt());
    chassis.reset(new Chassis());
    clamp.reset(new Clamp());
    winch.reset(new Winch());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = std::make_unique<OI>();


	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	chooser.AddDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
//	CameraServer::GetInstance()->StartAutomaticCapture();

	CameraServer::GetInstance()->StartAutomaticCapture().SetResolution(320,
	240);  // %rod3

	frc::SmartDashboard::PutData("Auto Modes", &chooser);

	//frc::SmartDashboard::PutData(RobotMap::subsystem1PowerDistributionPanel1.get());
	frc::SmartDashboard::PutData(RobotMap::ahrs.get());
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	Robot::bucket->Disable();
	Robot::upperTilt->Disable();
	Robot::clampTilt->Disable();
	Robot::clamp->Disable();
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
	if(RobotController::GetUserButton()){
		Robot::clamp->reset();
		Robot::clampTilt->reset();
		Robot::upperTilt->reset();
		Robot::bucket->reset();
		Robot::chassis->resetEncoders();
	}
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	SmartDashboard::PutNumber("Upper", Robot::upperTilt->GetPosition());
	SmartDashboard::PutNumber("Bucket", Robot::bucket->GetPosition());
	SmartDashboard::PutNumber("Lower", Robot::clampTilt->GetPosition());
	SmartDashboard::PutNumber("Clamp", Robot::clamp->GetPosition());
	frc::Scheduler::GetInstance()->Run();
}


void Robot::TestPeriodic() {
	Robot::chassis->testPeriodic();
}


START_ROBOT_CLASS(Robot)

void Robot::TestInit() {
	Robot::chassis->enableInductiveBreaking(false);

}
