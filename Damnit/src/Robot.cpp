// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// 28-jan-18 rod
// adjusted p and tolerance
// changed x to z in drive joystick
//
#include <CameraServer.h>
#include <Commands/Scheduler.h>
#include <RobotBase.h>
#include <auto/AutoBuilder.h>
#include <auto/DontDoAnything.h>
#include <auto/DriveForward.h>
#include "auto/FieldModel.h"
#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<UpperTilt> Robot::upperTilt;
std::shared_ptr<Bucket> Robot::bucket;
std::shared_ptr<ClampTilt> Robot::clampTilt;
std::shared_ptr<Chassis> Robot::chassis;
std::shared_ptr<Clamp> Robot::clamp;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Winch> Robot::winch;

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    upperTilt.reset(new UpperTilt());
    bucket.reset(new Bucket());
    clampTilt.reset(new ClampTilt());
    chassis.reset(new Chassis());
    clamp.reset(new Clamp());
    winch.reset(new Winch());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = std::make_unique<OI>();
	FieldModel::getInstance();


	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autoModes.AddDefault("auto builder(TODO)",AutoMode::Builder);
	autoModes.AddObject("simple auto sequence(?)", AutoMode::Seq);
    autoModes.AddObject("drive forward(timed)",AutoMode::Dumb);
    autoModes.AddObject("drive forward(gyro+encoder)", AutoMode::Fwd_ge);
    autoModes.AddObject("drive forward (profiled)",AutoMode::Profiled);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	CameraServer::GetInstance()->StartAutomaticCapture().SetResolution(320,
	240);  // %rod3

	frc::SmartDashboard::PutData("Auto Modes", &autoModes);

	//frc::SmartDashboard::PutData(RobotMap::subsystem1PowerDistributionPanel1.get());
	frc::SmartDashboard::PutData(RobotMap::ahrs.get());
	frc::SmartDashboard::PutData(frc::Scheduler::GetInstance());
	frc::Scheduler::GetInstance()->SetName("scheduler");

}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	Robot::bucket->Disable();
	Robot::upperTilt->Disable();
	Robot::clampTilt->Disable();
	Robot::clamp->Disable();
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();


	if(RobotController::GetUserButton()){
		Robot::clamp->reset();
		Robot::clampTilt->reset();
		Robot::upperTilt->reset();
		Robot::bucket->reset();
		Robot::chassis->resetEncoders();
	}
}

void Robot::AutonomousInit() {
	llvm::outs() << "starting auto\n";

	switch (autoModes.GetSelected()) {
	case AutoMode::Fwd_mm:
		autonomousCommand = &auto_fwd_mm;
		break;
	case AutoMode::Dumb:
		autonomousCommand = &auto_dumbFwd;
		break;
	case AutoMode::Builder:
		autonomousCommand = &auto_builder;
		break;
	case AutoMode::Seq:
		autonomousCommand = &auto_seq;
		break;
	case AutoMode::Fwd_ge:
		autonomousCommand = &auto_fwd_ge;
		break;
	case AutoMode::Profiled:
		autonomousCommand = &auto_profiled;
	}



	if (autonomousCommand != nullptr){
		autonomousCommand->Start();
		DriverStation::ReportWarning("starting auto command: "+autonomousCommand->GetName());
	}
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
//	SmartDashboard::PutNumber("Upper", Robot::upperTilt->GetPosition());
//	SmartDashboard::PutNumber("Bucket", Robot::bucket->GetPosition());
//	SmartDashboard::PutNumber("Lower", Robot::clampTilt->GetPosition());
//	SmartDashboard::PutNumber("Clamp", Robot::clamp->GetPosition());
	frc::Scheduler::GetInstance()->Run();
}


void Robot::TestPeriodic() {
	Robot::chassis->testPeriodic();
}


START_ROBOT_CLASS(Robot)

void Robot::TestInit() {
	//Robot::chassis->enableInductiveBreaking(false);

}

void Robot::RobotPeriodic() {
	//FieldModel::getInstance().update();

}
