// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"


#include "Chassis.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveWithJoystick.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Chassis::Chassis() : frc::Subsystem("Chassis") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftFront = RobotMap::chassisLeftFront;
    leftRear = RobotMap::chassisLeftRear;
    leftSide = RobotMap::chassisLeftSide;
    rightFront = RobotMap::chassisRightFront;
    rightRear1 = RobotMap::chassisRightRear1;
    rightSide = RobotMap::chassisRightSide;
    differentialDrive = RobotMap::chassisDifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Chassis::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Chassis::Periodic() {
    // Put code here to be run every loop
	float lf = leftFront->GetSelectedSensorPosition(0);  // left forward encoder %rod15
	float rf = rightFront->GetSelectedSensorPosition(0); // right forward encoder
	SmartDashboard::PutNumber("Left", lf);
	SmartDashboard::PutNumber("Right", rf);
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

// add tank drive  %rod1
void Chassis::TankDrive(std::shared_ptr<Joystick>stickPosition) {
	float y = -stickPosition->GetY();
	float z = stickPosition->GetZ();

	// y and z cubed, results in less drive around zero input
	y = pow(y,3);
	z = pow(z,3);
	z = z * 0.6;
	z += -0.1 * y;  // counter the curve to the right %rod15b

	differentialDrive->ArcadeDrive(y,z,false);
}
