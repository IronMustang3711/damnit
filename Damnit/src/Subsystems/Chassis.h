// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef CHASSIS_H
#define CHASSIS_H
#include <Commands/Subsystem.h>
#include <WPILib.h>
#include <ctre/Phoenix.h>
namespace chassis_config {
	struct Config {
		double rotation_correction = -0.1;
	};
	constexpr Config COMPETITION_CONFIG{};
	constexpr Config PROTO_CONFIG{0.0};

	const Config& getConfig();

};

/**
 *
 *
 * @author ExampleAuthor
 */
class Chassis: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> leftFront;
	std::shared_ptr<WPI_TalonSRX> leftRear;
	std::shared_ptr<frc::SpeedControllerGroup> leftSide;
	std::shared_ptr<WPI_TalonSRX> rightFront;
	std::shared_ptr<WPI_TalonSRX> rightRear1;
	std::shared_ptr<frc::SpeedControllerGroup> rightSide;
	std::shared_ptr<frc::DifferentialDrive> differentialDrive;

	bool reversed = false;

	double rotation_correction;

protected:
	explicit Chassis(double rotation_correction);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	Chassis();

	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	void TeleopDrive(std::shared_ptr<Joystick> stickPosition);

    void ArcadeDrive(double fwd, double rotate);

    void curvatureDrive(double fwd, double rotate, bool quickTurn);

	void mm_driveForward_init();
    void mm_Periodic(double distanceInches);

    bool driveStraightIsOnTarget();


    void resetEncoders();

    void prepareForAutonomous();

    void prepareForTeleop();

    void enableInductiveBreaking(bool enable);

    void stop();
    void testPeriodic();

	void toggleDirection();


private:
    void disableMotorSafety();
    void enableMotorSafety();

	double VlPrev=0;
	double VrPrev=0;


};

#endif
